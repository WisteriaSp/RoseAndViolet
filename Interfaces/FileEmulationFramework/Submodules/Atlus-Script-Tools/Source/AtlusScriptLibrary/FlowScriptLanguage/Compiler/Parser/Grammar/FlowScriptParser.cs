//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\..\..\AtlusScriptLibrary\FlowScriptLanguage\Compiler\Parser\Grammar\FlowScript.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AtlusScriptLibrary.FlowScriptLanguage.Compiler.Parser.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public partial class FlowScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, Import=33, Function=34, Global=35, Const=36, AiLocal=37, AiGlobal=38, 
		Bit=39, Enum=40, Out=41, Local=42, Count=43, If=44, Else=45, For=46, While=47, 
		Break=48, Continue=49, Return=50, Goto=51, Switch=52, Case=53, Default=54, 
		BoolLiteral=55, IntLiteral=56, FloatLiteral=57, StringLiteral=58, TypeIdentifier=59, 
		PrimitiveTypeIdentifier=60, Identifier=61, Whitespace=62, Newline=63, 
		BlockComment=64, LineComment=65;
	public const int
		RULE_compilationUnit = 0, RULE_importStatement = 1, RULE_statement = 2, 
		RULE_nullStatement = 3, RULE_compoundStatement = 4, RULE_declarationStatement = 5, 
		RULE_functionDeclarationStatement = 6, RULE_procedureDeclarationStatement = 7, 
		RULE_variableDeclarationStatement = 8, RULE_arraySignifier = 9, RULE_enumTypeDeclarationStatement = 10, 
		RULE_enumValueDeclaration = 11, RULE_enumValueList = 12, RULE_labelDeclarationStatement = 13, 
		RULE_variableModifier = 14, RULE_parameterList = 15, RULE_parameter = 16, 
		RULE_argumentList = 17, RULE_argument = 18, RULE_expressionList = 19, 
		RULE_expression = 20, RULE_primary = 21, RULE_constant = 22, RULE_ifStatement = 23, 
		RULE_forStatement = 24, RULE_whileStatement = 25, RULE_breakStatement = 26, 
		RULE_continueStatement = 27, RULE_returnStatement = 28, RULE_gotoStatement = 29, 
		RULE_switchStatement = 30, RULE_switchLabel = 31;
	public static readonly string[] ruleNames = {
		"compilationUnit", "importStatement", "statement", "nullStatement", "compoundStatement", 
		"declarationStatement", "functionDeclarationStatement", "procedureDeclarationStatement", 
		"variableDeclarationStatement", "arraySignifier", "enumTypeDeclarationStatement", 
		"enumValueDeclaration", "enumValueList", "labelDeclarationStatement", 
		"variableModifier", "parameterList", "parameter", "argumentList", "argument", 
		"expressionList", "expression", "primary", "constant", "ifStatement", 
		"forStatement", "whileStatement", "breakStatement", "continueStatement", 
		"returnStatement", "gotoStatement", "switchStatement", "switchLabel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "'{'", "'}'", "'='", "'['", "']'", "','", "':'", 
		"'.'", "'--'", "'++'", "'!'", "'-'", "'*'", "'/'", "'%'", "'+'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'+='", "'-='", 
		"'*='", "'/='", "'%='", "'import'", "'function'", "'global'", "'const'", 
		"'ai_local'", "'ai_global'", "'bit'", "'enum'", "'out'", "'local'", "'count'", 
		"'if'", "'else'", "'for'", "'while'", "'break'", "'continue'", "'return'", 
		"'goto'", "'switch'", "'case'", "'default'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "Import", "Function", 
		"Global", "Const", "AiLocal", "AiGlobal", "Bit", "Enum", "Out", "Local", 
		"Count", "If", "Else", "For", "While", "Break", "Continue", "Return", 
		"Goto", "Switch", "Case", "Default", "BoolLiteral", "IntLiteral", "FloatLiteral", 
		"StringLiteral", "TypeIdentifier", "PrimitiveTypeIdentifier", "Identifier", 
		"Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FlowScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FlowScriptParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(FlowScriptParser.Eof, 0); }
		public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public DeclarationStatementContext[] declarationStatement() {
			return GetRuleContexts<DeclarationStatementContext>();
		}
		public DeclarationStatementContext declarationStatement(int i) {
			return GetRuleContext<DeclarationStatementContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==Import) {
				{
				{
				State = 64; importStatement();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Function) | (1L << Global) | (1L << Const) | (1L << AiLocal) | (1L << AiGlobal) | (1L << Bit) | (1L << Enum) | (1L << Local) | (1L << Count) | (1L << TypeIdentifier) | (1L << Identifier))) != 0)) {
				{
				{
				State = 70; declarationStatement();
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 76; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(FlowScriptParser.Import, 0); }
		public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(Import);
			State = 79; Match(T__0);
			State = 80; Match(StringLiteral);
			State = 81; Match(T__1);
			State = 82; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public NullStatementContext nullStatement() {
			return GetRuleContext<NullStatementContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public GotoStatementContext gotoStatement() {
			return GetRuleContext<GotoStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 98;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; nullStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85; compoundStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 86; declarationStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 87; expression(0);
				State = 88; Match(T__2);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 90; ifStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; forStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 92; whileStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 93; breakStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 94; continueStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 95; returnStatement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 96; gotoStatement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 97; switchStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullStatementContext : ParserRuleContext {
		public NullStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterNullStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitNullStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullStatementContext nullStatement() {
		NullStatementContext _localctx = new NullStatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_nullStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(T__3);
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << Function) | (1L << Global) | (1L << Const) | (1L << AiLocal) | (1L << AiGlobal) | (1L << Bit) | (1L << Enum) | (1L << Local) | (1L << Count) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << Switch) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << TypeIdentifier) | (1L << Identifier))) != 0)) {
				{
				{
				State = 103; statement();
				}
				}
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 109; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		public FunctionDeclarationStatementContext functionDeclarationStatement() {
			return GetRuleContext<FunctionDeclarationStatementContext>(0);
		}
		public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
			return GetRuleContext<ProcedureDeclarationStatementContext>(0);
		}
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public EnumTypeDeclarationStatementContext enumTypeDeclarationStatement() {
			return GetRuleContext<EnumTypeDeclarationStatementContext>(0);
		}
		public LabelDeclarationStatementContext labelDeclarationStatement() {
			return GetRuleContext<LabelDeclarationStatementContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext declarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_declarationStatement);
		try {
			State = 116;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; functionDeclarationStatement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; procedureDeclarationStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113; variableDeclarationStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114; enumTypeDeclarationStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115; labelDeclarationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(FlowScriptParser.Function, 0); }
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public FunctionDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterFunctionDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitFunctionDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationStatementContext functionDeclarationStatement() {
		FunctionDeclarationStatementContext _localctx = new FunctionDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_functionDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(Function);
			State = 119; Match(T__0);
			State = 120; Match(IntLiteral);
			State = 121; Match(T__1);
			State = 122; Match(TypeIdentifier);
			State = 123; Match(Identifier);
			State = 124; parameterList();
			State = 125; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public ProcedureDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterProcedureDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitProcedureDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
		ProcedureDeclarationStatementContext _localctx = new ProcedureDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_procedureDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(TypeIdentifier);
			State = 128; Match(Identifier);
			State = 129; parameterList();
			State = 130; compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public VariableModifierContext variableModifier() {
			return GetRuleContext<VariableModifierContext>(0);
		}
		public ArraySignifierContext arraySignifier() {
			return GetRuleContext<ArraySignifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Global) | (1L << Const) | (1L << AiLocal) | (1L << AiGlobal) | (1L << Bit) | (1L << Local) | (1L << Count))) != 0)) {
				{
				State = 132; variableModifier();
				}
			}

			State = 135; Match(TypeIdentifier);
			State = 136; Match(Identifier);
			State = 138;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 137; arraySignifier();
				}
			}

			State = 142;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 140; Match(T__5);
				State = 141; expression(0);
				}
			}

			State = 144; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraySignifierContext : ParserRuleContext {
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ArraySignifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraySignifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterArraySignifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitArraySignifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraySignifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraySignifierContext arraySignifier() {
		ArraySignifierContext _localctx = new ArraySignifierContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_arraySignifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 146; Match(T__6);
			State = 148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IntLiteral) {
				{
				State = 147; Match(IntLiteral);
				}
			}

			State = 150; Match(T__7);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumTypeDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(FlowScriptParser.Enum, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public EnumValueListContext enumValueList() {
			return GetRuleContext<EnumValueListContext>(0);
		}
		public EnumTypeDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumTypeDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumTypeDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumTypeDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumTypeDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumTypeDeclarationStatementContext enumTypeDeclarationStatement() {
		EnumTypeDeclarationStatementContext _localctx = new EnumTypeDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_enumTypeDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(Enum);
			State = 153; Match(Identifier);
			State = 154; enumValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumValueDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumValueDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumValueDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueDeclarationContext enumValueDeclaration() {
		EnumValueDeclarationContext _localctx = new EnumValueDeclarationContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_enumValueDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(Identifier);
			State = 159;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 157; Match(T__5);
				State = 158; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueListContext : ParserRuleContext {
		public EnumValueDeclarationContext[] enumValueDeclaration() {
			return GetRuleContexts<EnumValueDeclarationContext>();
		}
		public EnumValueDeclarationContext enumValueDeclaration(int i) {
			return GetRuleContext<EnumValueDeclarationContext>(i);
		}
		public EnumValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEnumValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEnumValueList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueListContext enumValueList() {
		EnumValueListContext _localctx = new EnumValueListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_enumValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(T__3);
			State = 163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 162; enumValueDeclaration();
				}
				break;
			}
			State = 170;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 165; enumValueDeclaration();
					State = 166; Match(T__8);
					}
					} 
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 177;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Identifier) {
				{
				State = 173; enumValueDeclaration();
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__8) {
					{
					State = 174; Match(T__8);
					}
				}

				}
			}

			State = 179; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDeclarationStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public LabelDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLabelDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLabelDeclarationStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabelDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelDeclarationStatementContext labelDeclarationStatement() {
		LabelDeclarationStatementContext _localctx = new LabelDeclarationStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_labelDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(Identifier);
			State = 182; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public ITerminalNode Global() { return GetToken(FlowScriptParser.Global, 0); }
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ITerminalNode Const() { return GetToken(FlowScriptParser.Const, 0); }
		public ITerminalNode AiLocal() { return GetToken(FlowScriptParser.AiLocal, 0); }
		public ITerminalNode AiGlobal() { return GetToken(FlowScriptParser.AiGlobal, 0); }
		public ITerminalNode Bit() { return GetToken(FlowScriptParser.Bit, 0); }
		public ITerminalNode Count() { return GetToken(FlowScriptParser.Count, 0); }
		public ITerminalNode Local() { return GetToken(FlowScriptParser.Local, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_variableModifier);
		int _la;
		try {
			State = 219;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Global:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184; Match(Global);
				State = 188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0) {
					{
					State = 185; Match(T__0);
					State = 186; Match(IntLiteral);
					State = 187; Match(T__1);
					}
				}

				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 2);
				{
				State = 190; Match(Const);
				}
				break;
			case AiLocal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; Match(AiLocal);
				State = 195;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0) {
					{
					State = 192; Match(T__0);
					State = 193; Match(IntLiteral);
					State = 194; Match(T__1);
					}
				}

				}
				break;
			case AiGlobal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 197; Match(AiGlobal);
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0) {
					{
					State = 198; Match(T__0);
					State = 199; Match(IntLiteral);
					State = 200; Match(T__1);
					}
				}

				}
				break;
			case Bit:
				EnterOuterAlt(_localctx, 5);
				{
				State = 203; Match(Bit);
				{
				State = 204; Match(T__0);
				State = 205; Match(IntLiteral);
				State = 206; Match(T__1);
				}
				}
				break;
			case Count:
				EnterOuterAlt(_localctx, 6);
				{
				State = 207; Match(Count);
				State = 211;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0) {
					{
					State = 208; Match(T__0);
					State = 209; Match(IntLiteral);
					State = 210; Match(T__1);
					}
				}

				}
				break;
			case Local:
				EnterOuterAlt(_localctx, 7);
				{
				State = 213; Match(Local);
				State = 217;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__0) {
					{
					State = 214; Match(T__0);
					State = 215; Match(IntLiteral);
					State = 216; Match(T__1);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; Match(T__0);
			State = 223;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Out || _la==TypeIdentifier) {
				{
				State = 222; parameter();
				}
			}

			State = 229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8) {
				{
				{
				State = 225; Match(T__8);
				State = 226; parameter();
				}
				}
				State = 231;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 232; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ITerminalNode Out() { return GetToken(FlowScriptParser.Out, 0); }
		public ArraySignifierContext arraySignifier() {
			return GetRuleContext<ArraySignifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==Out) {
				{
				State = 234; Match(Out);
				}
			}

			State = 237; Match(TypeIdentifier);
			State = 238; Match(Identifier);
			State = 240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__6) {
				{
				State = 239; arraySignifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(T__0);
			State = 244;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << Out) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
				{
				State = 243; argument();
				}
			}

			State = 250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8) {
				{
				{
				State = 246; Match(T__8);
				State = 247; argument();
				}
				}
				State = 252;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 253; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Out() { return GetToken(FlowScriptParser.Out, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_argument);
		try {
			State = 258;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__0:
			case T__2:
			case T__3:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case BoolLiteral:
			case IntLiteral:
			case FloatLiteral:
			case StringLiteral:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; expression(0);
				}
				break;
			case Out:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; Match(Out);
				State = 257; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(T__0);
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
				{
				State = 261; expression(0);
				}
			}

			State = 268;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__8) {
				{
				{
				State = 264; Match(T__8);
				State = 265; expression(0);
				}
				}
				State = 270;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 271; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterAdditionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitAdditionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPostfixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPostfixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPostfixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitializerListExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InitializerListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterInitializerListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitInitializerListExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializerListExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubscriptExpressionContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SubscriptExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSubscriptExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSubscriptExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : ExpressionContext {
		public ITerminalNode TypeIdentifier() { return GetToken(FlowScriptParser.TypeIdentifier, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CastExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullExpressionContext : ExpressionContext {
		public NullExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterNullExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitNullExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompoundExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CompoundExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterCompoundExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitCompoundExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpressionContext : ExpressionContext {
		public ITerminalNode[] Identifier() { return GetTokens(FlowScriptParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(FlowScriptParser.Identifier, i);
		}
		public MemberAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterUnaryPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitUnaryPrefixExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPrefixExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				_localctx = new NullExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 274; Match(T__2);
				}
				break;

			case 2:
				{
				_localctx = new CompoundExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 275; Match(T__0);
				State = 276; expression(0);
				State = 277; Match(T__1);
				}
				break;

			case 3:
				{
				_localctx = new InitializerListExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 279; Match(T__3);
				State = 281;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << Identifier))) != 0)) {
					{
					State = 280; expression(0);
					}
				}

				State = 287;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 283; Match(T__8);
						State = 284; expression(0);
						}
						} 
					}
					State = 289;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,30,_ctx);
				}
				State = 291;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__8) {
					{
					State = 290; Match(T__8);
					}
				}

				State = 293; Match(T__4);
				}
				break;

			case 4:
				{
				_localctx = new SubscriptExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 294; Match(Identifier);
				State = 295; Match(T__6);
				State = 296; expression(0);
				State = 297; Match(T__7);
				}
				break;

			case 5:
				{
				_localctx = new MemberAccessExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 299; Match(Identifier);
				State = 300; Match(T__10);
				State = 301; Match(Identifier);
				}
				break;

			case 6:
				{
				_localctx = new CastExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 302; Match(T__0);
				State = 303; Match(TypeIdentifier);
				State = 304; Match(T__1);
				State = 305; Match(T__0);
				State = 306; expression(0);
				State = 307; Match(T__1);
				}
				break;

			case 7:
				{
				_localctx = new CallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 309; Match(Identifier);
				State = 310; argumentList();
				}
				break;

			case 8:
				{
				_localctx = new UnaryPrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 311;
				((UnaryPrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
					((UnaryPrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 312; expression(9);
				}
				break;

			case 9:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 313; primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 341;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 339;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,33,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 317;
						((MultiplicationExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
							((MultiplicationExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 318; expression(9);
						}
						break;

					case 2:
						{
						_localctx = new AdditionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 319;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 320;
						((AdditionExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__14 || _la==T__18) ) {
							((AdditionExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 321; expression(8);
						}
						break;

					case 3:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 322;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 323;
						((RelationalExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22))) != 0)) ) {
							((RelationalExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 324; expression(7);
						}
						break;

					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 325;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 326;
						((EqualityExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__23 || _la==T__24) ) {
							((EqualityExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 327; expression(6);
						}
						break;

					case 5:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 328;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 329; Match(T__25);
						State = 330; expression(5);
						}
						break;

					case 6:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 331;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 332; Match(T__26);
						State = 333; expression(4);
						}
						break;

					case 7:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 334;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 335;
						((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 336; expression(3);
						}
						break;

					case 8:
						{
						_localctx = new UnaryPostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 337;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 338;
						((UnaryPostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==T__11 || _la==T__12) ) {
							((UnaryPostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;
					}
					} 
				}
				State = 343;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierExpressionContext : PrimaryContext {
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : PrimaryContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_primary);
		try {
			State = 346;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BoolLiteral:
			case IntLiteral:
			case FloatLiteral:
			case StringLiteral:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; constant();
				}
				break;
			case Identifier:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode BoolLiteral() { return GetToken(FlowScriptParser.BoolLiteral, 0); }
		public ITerminalNode IntLiteral() { return GetToken(FlowScriptParser.IntLiteral, 0); }
		public ITerminalNode FloatLiteral() { return GetToken(FlowScriptParser.FloatLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(FlowScriptParser.StringLiteral, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(FlowScriptParser.If, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] Else() { return GetTokens(FlowScriptParser.Else); }
		public ITerminalNode Else(int i) {
			return GetToken(FlowScriptParser.Else, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(If);
			State = 351; Match(T__0);
			State = 352; expression(0);
			State = 353; Match(T__1);
			State = 354; statement();
			State = 359;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 355; Match(Else);
					State = 356; statement();
					}
					} 
				}
				State = 361;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,36,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(FlowScriptParser.For, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(For);
			State = 363; Match(T__0);
			State = 364; statement();
			State = 365; expression(0);
			State = 366; Match(T__2);
			State = 367; expression(0);
			State = 368; Match(T__1);
			State = 369; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(FlowScriptParser.While, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(While);
			State = 372; expression(0);
			State = 373; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(FlowScriptParser.Break, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; Match(Break);
			State = 376; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(FlowScriptParser.Continue, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; Match(Continue);
			State = 379; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(FlowScriptParser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(Return);
			State = 383;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 382; expression(0);
				}
				break;
			}
			State = 385; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStatementContext : ParserRuleContext {
		public ITerminalNode Goto() { return GetToken(FlowScriptParser.Goto, 0); }
		public ITerminalNode Identifier() { return GetToken(FlowScriptParser.Identifier, 0); }
		public ITerminalNode Case() { return GetToken(FlowScriptParser.Case, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Default() { return GetToken(FlowScriptParser.Default, 0); }
		public GotoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGotoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GotoStatementContext gotoStatement() {
		GotoStatementContext _localctx = new GotoStatementContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_gotoStatement);
		try {
			State = 399;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387; Match(Goto);
				State = 388; Match(Identifier);
				State = 389; Match(T__2);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390; Match(Goto);
				State = 391; Match(Case);
				State = 392; expression(0);
				State = 393; Match(T__2);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 395; Match(Goto);
				State = 396; Match(Case);
				State = 397; Match(Default);
				State = 398; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(FlowScriptParser.Switch, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(Switch);
			State = 402; Match(T__0);
			State = 403; expression(0);
			State = 404; Match(T__1);
			State = 405; Match(T__3);
			State = 407;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 406; switchLabel();
				}
				}
				State = 409;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==Case || _la==Default );
			State = 411; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(FlowScriptParser.Case, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Default() { return GetToken(FlowScriptParser.Default, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlowScriptListener typedListener = listener as IFlowScriptListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlowScriptVisitor<TResult> typedVisitor = visitor as IFlowScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_switchLabel);
		int _la;
		try {
			State = 430;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413; Match(Case);
				State = 414; expression(0);
				State = 415; Match(T__9);
				State = 419;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << Function) | (1L << Global) | (1L << Const) | (1L << AiLocal) | (1L << AiGlobal) | (1L << Bit) | (1L << Enum) | (1L << Local) | (1L << Count) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << Switch) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << TypeIdentifier) | (1L << Identifier))) != 0)) {
					{
					{
					State = 416; statement();
					}
					}
					State = 421;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422; Match(Default);
				State = 423; Match(T__9);
				State = 427;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << Function) | (1L << Global) | (1L << Const) | (1L << AiLocal) | (1L << AiGlobal) | (1L << Bit) | (1L << Enum) | (1L << Local) | (1L << Count) | (1L << If) | (1L << For) | (1L << While) | (1L << Break) | (1L << Continue) | (1L << Return) | (1L << Goto) | (1L << Switch) | (1L << BoolLiteral) | (1L << IntLiteral) | (1L << FloatLiteral) | (1L << StringLiteral) | (1L << TypeIdentifier) | (1L << Identifier))) != 0)) {
					{
					{
					State = 424; statement();
					}
					}
					State = 429;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);

		case 7: return Precpred(_ctx, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x43\x1B3\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\a\x2\x44\n\x2\f\x2\xE\x2G\v\x2\x3\x2\a\x2J\n\x2\f\x2\xE\x2M"+
		"\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5"+
		"\x4\x65\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\a\x6k\n\x6\f\x6\xE\x6n\v\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aw\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x5\n\x88\n\n\x3\n\x3\n"+
		"\x3\n\x5\n\x8D\n\n\x3\n\x3\n\x5\n\x91\n\n\x3\n\x3\n\x3\v\x3\v\x5\v\x97"+
		"\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x5\r\xA2\n\r\x3\xE\x3"+
		"\xE\x5\xE\xA6\n\xE\x3\xE\x3\xE\x3\xE\a\xE\xAB\n\xE\f\xE\xE\xE\xAE\v\xE"+
		"\x3\xE\x3\xE\x5\xE\xB2\n\xE\x5\xE\xB4\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xBF\n\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\xC6\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xCC"+
		"\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10"+
		"\xD6\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xDC\n\x10\x5\x10\xDE\n\x10"+
		"\x3\x11\x3\x11\x5\x11\xE2\n\x11\x3\x11\x3\x11\a\x11\xE6\n\x11\f\x11\xE"+
		"\x11\xE9\v\x11\x3\x11\x3\x11\x3\x12\x5\x12\xEE\n\x12\x3\x12\x3\x12\x3"+
		"\x12\x5\x12\xF3\n\x12\x3\x13\x3\x13\x5\x13\xF7\n\x13\x3\x13\x3\x13\a\x13"+
		"\xFB\n\x13\f\x13\xE\x13\xFE\v\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x5"+
		"\x14\x105\n\x14\x3\x15\x3\x15\x5\x15\x109\n\x15\x3\x15\x3\x15\a\x15\x10D"+
		"\n\x15\f\x15\xE\x15\x110\v\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x11C\n\x16\x3\x16\x3\x16\a\x16\x120"+
		"\n\x16\f\x16\xE\x16\x123\v\x16\x3\x16\x5\x16\x126\n\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16"+
		"\x13D\n\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x156\n\x16\f\x16\xE\x16\x159\v"+
		"\x16\x3\x17\x3\x17\x5\x17\x15D\n\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x168\n\x19\f\x19\xE\x19\x16B\v\x19"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E"+
		"\x3\x1E\x5\x1E\x182\n\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x192\n\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x6 \x19A\n \r \xE \x19B\x3 \x3 \x3!\x3!\x3!\x3"+
		"!\a!\x1A4\n!\f!\xE!\x1A7\v!\x3!\x3!\x3!\a!\x1AC\n!\f!\xE!\x1AF\v!\x5!"+
		"\x1B1\n!\x3!\x2\x2\x3*\"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x2\n\x3"+
		"\x2\xE\x11\x3\x2\x12\x14\x4\x2\x11\x11\x15\x15\x3\x2\x16\x19\x3\x2\x1A"+
		"\x1B\x4\x2\b\b\x1E\"\x3\x2\xE\xF\x3\x2\x39<\x1DD\x2\x45\x3\x2\x2\x2\x4"+
		"P\x3\x2\x2\x2\x6\x64\x3\x2\x2\x2\b\x66\x3\x2\x2\x2\nh\x3\x2\x2\x2\fv\x3"+
		"\x2\x2\x2\xEx\x3\x2\x2\x2\x10\x81\x3\x2\x2\x2\x12\x87\x3\x2\x2\x2\x14"+
		"\x94\x3\x2\x2\x2\x16\x9A\x3\x2\x2\x2\x18\x9E\x3\x2\x2\x2\x1A\xA3\x3\x2"+
		"\x2\x2\x1C\xB7\x3\x2\x2\x2\x1E\xDD\x3\x2\x2\x2 \xDF\x3\x2\x2\x2\"\xED"+
		"\x3\x2\x2\x2$\xF4\x3\x2\x2\x2&\x104\x3\x2\x2\x2(\x106\x3\x2\x2\x2*\x13C"+
		"\x3\x2\x2\x2,\x15C\x3\x2\x2\x2.\x15E\x3\x2\x2\x2\x30\x160\x3\x2\x2\x2"+
		"\x32\x16C\x3\x2\x2\x2\x34\x175\x3\x2\x2\x2\x36\x179\x3\x2\x2\x2\x38\x17C"+
		"\x3\x2\x2\x2:\x17F\x3\x2\x2\x2<\x191\x3\x2\x2\x2>\x193\x3\x2\x2\x2@\x1B0"+
		"\x3\x2\x2\x2\x42\x44\x5\x4\x3\x2\x43\x42\x3\x2\x2\x2\x44G\x3\x2\x2\x2"+
		"\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46K\x3\x2\x2\x2G\x45\x3\x2\x2"+
		"\x2HJ\x5\f\a\x2IH\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2"+
		"LN\x3\x2\x2\x2MK\x3\x2\x2\x2NO\a\x2\x2\x3O\x3\x3\x2\x2\x2PQ\a#\x2\x2Q"+
		"R\a\x3\x2\x2RS\a<\x2\x2ST\a\x4\x2\x2TU\a\x5\x2\x2U\x5\x3\x2\x2\x2V\x65"+
		"\x5\b\x5\x2W\x65\x5\n\x6\x2X\x65\x5\f\a\x2YZ\x5*\x16\x2Z[\a\x5\x2\x2["+
		"\x65\x3\x2\x2\x2\\\x65\x5\x30\x19\x2]\x65\x5\x32\x1A\x2^\x65\x5\x34\x1B"+
		"\x2_\x65\x5\x36\x1C\x2`\x65\x5\x38\x1D\x2\x61\x65\x5:\x1E\x2\x62\x65\x5"+
		"<\x1F\x2\x63\x65\x5> \x2\x64V\x3\x2\x2\x2\x64W\x3\x2\x2\x2\x64X\x3\x2"+
		"\x2\x2\x64Y\x3\x2\x2\x2\x64\\\x3\x2\x2\x2\x64]\x3\x2\x2\x2\x64^\x3\x2"+
		"\x2\x2\x64_\x3\x2\x2\x2\x64`\x3\x2\x2\x2\x64\x61\x3\x2\x2\x2\x64\x62\x3"+
		"\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65\a\x3\x2\x2\x2\x66g\a\x5\x2\x2g\t\x3"+
		"\x2\x2\x2hl\a\x6\x2\x2ik\x5\x6\x4\x2ji\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3"+
		"\x2\x2\x2lm\x3\x2\x2\x2mo\x3\x2\x2\x2nl\x3\x2\x2\x2op\a\a\x2\x2p\v\x3"+
		"\x2\x2\x2qw\x5\xE\b\x2rw\x5\x10\t\x2sw\x5\x12\n\x2tw\x5\x16\f\x2uw\x5"+
		"\x1C\xF\x2vq\x3\x2\x2\x2vr\x3\x2\x2\x2vs\x3\x2\x2\x2vt\x3\x2\x2\x2vu\x3"+
		"\x2\x2\x2w\r\x3\x2\x2\x2xy\a$\x2\x2yz\a\x3\x2\x2z{\a:\x2\x2{|\a\x4\x2"+
		"\x2|}\a=\x2\x2}~\a?\x2\x2~\x7F\x5 \x11\x2\x7F\x80\a\x5\x2\x2\x80\xF\x3"+
		"\x2\x2\x2\x81\x82\a=\x2\x2\x82\x83\a?\x2\x2\x83\x84\x5 \x11\x2\x84\x85"+
		"\x5\n\x6\x2\x85\x11\x3\x2\x2\x2\x86\x88\x5\x1E\x10\x2\x87\x86\x3\x2\x2"+
		"\x2\x87\x88\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8A\a=\x2\x2\x8A\x8C\a"+
		"?\x2\x2\x8B\x8D\x5\x14\v\x2\x8C\x8B\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D"+
		"\x90\x3\x2\x2\x2\x8E\x8F\a\b\x2\x2\x8F\x91\x5*\x16\x2\x90\x8E\x3\x2\x2"+
		"\x2\x90\x91\x3\x2\x2\x2\x91\x92\x3\x2\x2\x2\x92\x93\a\x5\x2\x2\x93\x13"+
		"\x3\x2\x2\x2\x94\x96\a\t\x2\x2\x95\x97\a:\x2\x2\x96\x95\x3\x2\x2\x2\x96"+
		"\x97\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x99\a\n\x2\x2\x99\x15\x3\x2\x2"+
		"\x2\x9A\x9B\a*\x2\x2\x9B\x9C\a?\x2\x2\x9C\x9D\x5\x1A\xE\x2\x9D\x17\x3"+
		"\x2\x2\x2\x9E\xA1\a?\x2\x2\x9F\xA0\a\b\x2\x2\xA0\xA2\x5*\x16\x2\xA1\x9F"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\x19\x3\x2\x2\x2\xA3\xA5\a\x6\x2\x2"+
		"\xA4\xA6\x5\x18\r\x2\xA5\xA4\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xAC\x3"+
		"\x2\x2\x2\xA7\xA8\x5\x18\r\x2\xA8\xA9\a\v\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA"+
		"\xA7\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2"+
		"\x2\x2\xAD\xB3\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB1\x5\x18\r\x2\xB0"+
		"\xB2\a\v\x2\x2\xB1\xB0\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB4\x3\x2\x2"+
		"\x2\xB3\xAF\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6"+
		"\a\a\x2\x2\xB6\x1B\x3\x2\x2\x2\xB7\xB8\a?\x2\x2\xB8\xB9\a\f\x2\x2\xB9"+
		"\x1D\x3\x2\x2\x2\xBA\xBE\a%\x2\x2\xBB\xBC\a\x3\x2\x2\xBC\xBD\a:\x2\x2"+
		"\xBD\xBF\a\x4\x2\x2\xBE\xBB\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xDE\x3"+
		"\x2\x2\x2\xC0\xDE\a&\x2\x2\xC1\xC5\a\'\x2\x2\xC2\xC3\a\x3\x2\x2\xC3\xC4"+
		"\a:\x2\x2\xC4\xC6\a\x4\x2\x2\xC5\xC2\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6"+
		"\xDE\x3\x2\x2\x2\xC7\xCB\a(\x2\x2\xC8\xC9\a\x3\x2\x2\xC9\xCA\a:\x2\x2"+
		"\xCA\xCC\a\x4\x2\x2\xCB\xC8\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xDE\x3"+
		"\x2\x2\x2\xCD\xCE\a)\x2\x2\xCE\xCF\a\x3\x2\x2\xCF\xD0\a:\x2\x2\xD0\xDE"+
		"\a\x4\x2\x2\xD1\xD5\a-\x2\x2\xD2\xD3\a\x3\x2\x2\xD3\xD4\a:\x2\x2\xD4\xD6"+
		"\a\x4\x2\x2\xD5\xD2\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xDE\x3\x2\x2\x2"+
		"\xD7\xDB\a,\x2\x2\xD8\xD9\a\x3\x2\x2\xD9\xDA\a:\x2\x2\xDA\xDC\a\x4\x2"+
		"\x2\xDB\xD8\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDE\x3\x2\x2\x2\xDD\xBA"+
		"\x3\x2\x2\x2\xDD\xC0\x3\x2\x2\x2\xDD\xC1\x3\x2\x2\x2\xDD\xC7\x3\x2\x2"+
		"\x2\xDD\xCD\x3\x2\x2\x2\xDD\xD1\x3\x2\x2\x2\xDD\xD7\x3\x2\x2\x2\xDE\x1F"+
		"\x3\x2\x2\x2\xDF\xE1\a\x3\x2\x2\xE0\xE2\x5\"\x12\x2\xE1\xE0\x3\x2\x2\x2"+
		"\xE1\xE2\x3\x2\x2\x2\xE2\xE7\x3\x2\x2\x2\xE3\xE4\a\v\x2\x2\xE4\xE6\x5"+
		"\"\x12\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2"+
		"\xE7\xE8\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xEB\a"+
		"\x4\x2\x2\xEB!\x3\x2\x2\x2\xEC\xEE\a+\x2\x2\xED\xEC\x3\x2\x2\x2\xED\xEE"+
		"\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF0\a=\x2\x2\xF0\xF2\a?\x2\x2\xF1"+
		"\xF3\x5\x14\v\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3#\x3\x2\x2"+
		"\x2\xF4\xF6\a\x3\x2\x2\xF5\xF7\x5&\x14\x2\xF6\xF5\x3\x2\x2\x2\xF6\xF7"+
		"\x3\x2\x2\x2\xF7\xFC\x3\x2\x2\x2\xF8\xF9\a\v\x2\x2\xF9\xFB\x5&\x14\x2"+
		"\xFA\xF8\x3\x2\x2\x2\xFB\xFE\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFC\xFD\x3"+
		"\x2\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFF\x100\a\x4\x2\x2"+
		"\x100%\x3\x2\x2\x2\x101\x105\x5*\x16\x2\x102\x103\a+\x2\x2\x103\x105\a"+
		"?\x2\x2\x104\x101\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x105\'\x3\x2\x2\x2"+
		"\x106\x108\a\x3\x2\x2\x107\x109\x5*\x16\x2\x108\x107\x3\x2\x2\x2\x108"+
		"\x109\x3\x2\x2\x2\x109\x10E\x3\x2\x2\x2\x10A\x10B\a\v\x2\x2\x10B\x10D"+
		"\x5*\x16\x2\x10C\x10A\x3\x2\x2\x2\x10D\x110\x3\x2\x2\x2\x10E\x10C\x3\x2"+
		"\x2\x2\x10E\x10F\x3\x2\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x10E\x3\x2\x2"+
		"\x2\x111\x112\a\x4\x2\x2\x112)\x3\x2\x2\x2\x113\x114\b\x16\x1\x2\x114"+
		"\x13D\a\x5\x2\x2\x115\x116\a\x3\x2\x2\x116\x117\x5*\x16\x2\x117\x118\a"+
		"\x4\x2\x2\x118\x13D\x3\x2\x2\x2\x119\x11B\a\x6\x2\x2\x11A\x11C\x5*\x16"+
		"\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C\x121\x3\x2\x2\x2"+
		"\x11D\x11E\a\v\x2\x2\x11E\x120\x5*\x16\x2\x11F\x11D\x3\x2\x2\x2\x120\x123"+
		"\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122\x3\x2\x2\x2\x122\x125\x3"+
		"\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x126\a\v\x2\x2\x125\x124\x3\x2\x2"+
		"\x2\x125\x126\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x13D\a\a\x2\x2\x128"+
		"\x129\a?\x2\x2\x129\x12A\a\t\x2\x2\x12A\x12B\x5*\x16\x2\x12B\x12C\a\n"+
		"\x2\x2\x12C\x13D\x3\x2\x2\x2\x12D\x12E\a?\x2\x2\x12E\x12F\a\r\x2\x2\x12F"+
		"\x13D\a?\x2\x2\x130\x131\a\x3\x2\x2\x131\x132\a=\x2\x2\x132\x133\a\x4"+
		"\x2\x2\x133\x134\a\x3\x2\x2\x134\x135\x5*\x16\x2\x135\x136\a\x4\x2\x2"+
		"\x136\x13D\x3\x2\x2\x2\x137\x138\a?\x2\x2\x138\x13D\x5$\x13\x2\x139\x13A"+
		"\t\x2\x2\x2\x13A\x13D\x5*\x16\v\x13B\x13D\x5,\x17\x2\x13C\x113\x3\x2\x2"+
		"\x2\x13C\x115\x3\x2\x2\x2\x13C\x119\x3\x2\x2\x2\x13C\x128\x3\x2\x2\x2"+
		"\x13C\x12D\x3\x2\x2\x2\x13C\x130\x3\x2\x2\x2\x13C\x137\x3\x2\x2\x2\x13C"+
		"\x139\x3\x2\x2\x2\x13C\x13B\x3\x2\x2\x2\x13D\x157\x3\x2\x2\x2\x13E\x13F"+
		"\f\n\x2\x2\x13F\x140\t\x3\x2\x2\x140\x156\x5*\x16\v\x141\x142\f\t\x2\x2"+
		"\x142\x143\t\x4\x2\x2\x143\x156\x5*\x16\n\x144\x145\f\b\x2\x2\x145\x146"+
		"\t\x5\x2\x2\x146\x156\x5*\x16\t\x147\x148\f\a\x2\x2\x148\x149\t\x6\x2"+
		"\x2\x149\x156\x5*\x16\b\x14A\x14B\f\x6\x2\x2\x14B\x14C\a\x1C\x2\x2\x14C"+
		"\x156\x5*\x16\a\x14D\x14E\f\x5\x2\x2\x14E\x14F\a\x1D\x2\x2\x14F\x156\x5"+
		"*\x16\x6\x150\x151\f\x4\x2\x2\x151\x152\t\a\x2\x2\x152\x156\x5*\x16\x5"+
		"\x153\x154\f\f\x2\x2\x154\x156\t\b\x2\x2\x155\x13E\x3\x2\x2\x2\x155\x141"+
		"\x3\x2\x2\x2\x155\x144\x3\x2\x2\x2\x155\x147\x3\x2\x2\x2\x155\x14A\x3"+
		"\x2\x2\x2\x155\x14D\x3\x2\x2\x2\x155\x150\x3\x2\x2\x2\x155\x153\x3\x2"+
		"\x2\x2\x156\x159\x3\x2\x2\x2\x157\x155\x3\x2\x2\x2\x157\x158\x3\x2\x2"+
		"\x2\x158+\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15D\x5.\x18\x2\x15B"+
		"\x15D\a?\x2\x2\x15C\x15A\x3\x2\x2\x2\x15C\x15B\x3\x2\x2\x2\x15D-\x3\x2"+
		"\x2\x2\x15E\x15F\t\t\x2\x2\x15F/\x3\x2\x2\x2\x160\x161\a.\x2\x2\x161\x162"+
		"\a\x3\x2\x2\x162\x163\x5*\x16\x2\x163\x164\a\x4\x2\x2\x164\x169\x5\x6"+
		"\x4\x2\x165\x166\a/\x2\x2\x166\x168\x5\x6\x4\x2\x167\x165\x3\x2\x2\x2"+
		"\x168\x16B\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A"+
		"\x31\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16C\x16D\a\x30\x2\x2\x16D\x16E"+
		"\a\x3\x2\x2\x16E\x16F\x5\x6\x4\x2\x16F\x170\x5*\x16\x2\x170\x171\a\x5"+
		"\x2\x2\x171\x172\x5*\x16\x2\x172\x173\a\x4\x2\x2\x173\x174\x5\x6\x4\x2"+
		"\x174\x33\x3\x2\x2\x2\x175\x176\a\x31\x2\x2\x176\x177\x5*\x16\x2\x177"+
		"\x178\x5\x6\x4\x2\x178\x35\x3\x2\x2\x2\x179\x17A\a\x32\x2\x2\x17A\x17B"+
		"\a\x5\x2\x2\x17B\x37\x3\x2\x2\x2\x17C\x17D\a\x33\x2\x2\x17D\x17E\a\x5"+
		"\x2\x2\x17E\x39\x3\x2\x2\x2\x17F\x181\a\x34\x2\x2\x180\x182\x5*\x16\x2"+
		"\x181\x180\x3\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183"+
		"\x184\a\x5\x2\x2\x184;\x3\x2\x2\x2\x185\x186\a\x35\x2\x2\x186\x187\a?"+
		"\x2\x2\x187\x192\a\x5\x2\x2\x188\x189\a\x35\x2\x2\x189\x18A\a\x37\x2\x2"+
		"\x18A\x18B\x5*\x16\x2\x18B\x18C\a\x5\x2\x2\x18C\x192\x3\x2\x2\x2\x18D"+
		"\x18E\a\x35\x2\x2\x18E\x18F\a\x37\x2\x2\x18F\x190\a\x38\x2\x2\x190\x192"+
		"\a\x5\x2\x2\x191\x185\x3\x2\x2\x2\x191\x188\x3\x2\x2\x2\x191\x18D\x3\x2"+
		"\x2\x2\x192=\x3\x2\x2\x2\x193\x194\a\x36\x2\x2\x194\x195\a\x3\x2\x2\x195"+
		"\x196\x5*\x16\x2\x196\x197\a\x4\x2\x2\x197\x199\a\x6\x2\x2\x198\x19A\x5"+
		"@!\x2\x199\x198\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2\x19B\x199\x3\x2\x2\x2"+
		"\x19B\x19C\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x19E\a\a\x2\x2\x19E"+
		"?\x3\x2\x2\x2\x19F\x1A0\a\x37\x2\x2\x1A0\x1A1\x5*\x16\x2\x1A1\x1A5\a\f"+
		"\x2\x2\x1A2\x1A4\x5\x6\x4\x2\x1A3\x1A2\x3\x2\x2\x2\x1A4\x1A7\x3\x2\x2"+
		"\x2\x1A5\x1A3\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2\x2\x1A6\x1B1\x3\x2\x2\x2"+
		"\x1A7\x1A5\x3\x2\x2\x2\x1A8\x1A9\a\x38\x2\x2\x1A9\x1AD\a\f\x2\x2\x1AA"+
		"\x1AC\x5\x6\x4\x2\x1AB\x1AA\x3\x2\x2\x2\x1AC\x1AF\x3\x2\x2\x2\x1AD\x1AB"+
		"\x3\x2\x2\x2\x1AD\x1AE\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2\x1AF\x1AD\x3"+
		"\x2\x2\x2\x1B0\x19F\x3\x2\x2\x2\x1B0\x1A8\x3\x2\x2\x2\x1B1\x41\x3\x2\x2"+
		"\x2-\x45K\x64lv\x87\x8C\x90\x96\xA1\xA5\xAC\xB1\xB3\xBE\xC5\xCB\xD5\xDB"+
		"\xDD\xE1\xE7\xED\xF2\xF6\xFC\x104\x108\x10E\x11B\x121\x125\x13C\x155\x157"+
		"\x15C\x169\x181\x191\x19B\x1A5\x1AD\x1B0";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AtlusScriptLibrary.FlowScriptLanguage.Compiler.Parser.Grammar
